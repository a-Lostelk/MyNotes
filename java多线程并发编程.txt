					java多线程并发编程
并发
	所有的编程语言都遵循了一个串行编程模型,也就是说定义了在完成某一动作的时候才会执行下一个动作
	线程允许在同一个线程中有存在多个程序控制流,但每个线程都有自己的程序计数器,栈以及局部变量,
	线程也被称之为轻量级进程
线程的优势
	计算机系统的基本调度单位是线程,多线程的好处在于某一线程在执行的时候,另外的程序可以在该线程之外的线程里执行
	例子:边烧开水边看报纸
	在没有充足同步的情况下,多个线程之间的执行顺序时不可预测的
	尽管多个线程是依次执行的,但由于计算机处理的高速运行,看起来是多个程序在一起执行的假象
安全性问题
	在多个线程在享有共同的内存地址的时候,某一线程可能会访问或者修改别的线程在使用的资源,因此需要为访问该资源的线程设立一个
	锁的机制,在访问该线程的时候别的线程只能等待,只有当该线程执行完操作的时候,其他线程才可以访问资源
线程无处不在
	所有的java程序都会使用线程,JVM启动的时候会为内部任务(垃圾回收期,终结操作)创建后台线程,并创建一个主线程来执行main方法

线程安全性
	对象的状态是指存储在实例或静态域的数据,在对象的状态中可能包含了任何可能影响其外部可见行为的数据
变量的共享和可变
	可以被多个线程同时访问,在其生命周期可以被改变
	要使得对象是线程安全的,需要采用同步机制来协同对象可变状态的访问,java的同步机制关键字是synchronize,volatile类型的变量
	显式锁和原子变量
	volatile只能确定对象可见性,synchronize能确保对象的原子性和可见性

无状态线程一定是线程安全的,没有任何线程对其的访问和修改,该线程永远是安全状态

竞态条件
	当某个计算的正确性取决于多个线程交替执行时序,就会发生竞态条件,也就是说,通过一个可能失效的观测结果来决定下一步的行为


